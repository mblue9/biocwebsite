[
  {
    "objectID": "countries.html",
    "href": "countries.html",
    "title": "Survey response numbers",
    "section": "",
    "text": "Link: https://t.maze.co/169169456.\nCloses: Friday June 23\nShow code\n# Load packages\nlibrary(tidyverse)\nlibrary(countrycode)\nlibrary(maps)\nlibrary(plotly)\nlibrary(reactable)\n\n# Import survey data\nd &lt;- read_csv(\"maze_169169456_block_9ddce458-867d-4f3b-85a4-93d015455926_sessions.csv\")\n\n# Standardise country names\nd_countries &lt;- d |&gt; \n  mutate(country = countrycode(value, origin = \"country.name\", destination = \"country.name\", origin_regex = TRUE)) \n\n# Fix country text not matched\nd_clean &lt;- d_countries |&gt; \n  mutate(country = \n    case_when(toupper(value) == \"NL\" ~ \"Netherlands\",\n              value == \"England\" ~ \"United Kingdom\",\n              value == \"CH\\n\" ~ \"Switzerland\",\n              TRUE ~ country))\n\n# Add continents\nd_clean &lt;- d_clean |&gt; \n    mutate(continent = countrycode(country, origin = \"country.name\", destination = \"continent\"))\n\n# Get counts per country\ncountry_counts &lt;- \n  d_clean |&gt; \n  group_by(country) |&gt;\n  mutate(n = n()) |&gt;\n  select(continent, country, n) |&gt;\n  distinct()"
  },
  {
    "objectID": "countries.html#map-of-response-numbers-by-country",
    "href": "countries.html#map-of-response-numbers-by-country",
    "title": "Survey response numbers",
    "section": "Map of response numbers by country",
    "text": "Map of response numbers by country\n\n\nShow code\nworld_map &lt;- map_data(\"world\")\nworld_map &lt;- subset(world_map, region != \"Antarctica\")\n\n# Standarise the region to the country names \nworld_map &lt;- world_map |&gt;\nmutate(country = countrycode(region, origin = \"country.name\", destination = \"country.name\", origin_regex = TRUE))\n\n# Merge the datasets\nworld_map &lt;- world_map %&gt;%\n  left_join(country_counts) |&gt;\n  mutate(n = replace_na(n, 0))\n\n# Plot\ngg &lt;- ggplot() +\n  geom_polygon(data = world_map, \n               aes(x = long, y = lat, group = group, fill = n, text = paste(country, n, sep = \"\\n\")), \n               colour = \"grey\", \n               linewidth = 0.25) +\n  scale_fill_gradient(low = \"white\", high = \"red\") + \n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  labs(fill = \"n\") \n\n\nggplotly(gg, tooltip = \"text\") |&gt; \n  layout(width=900,\n         legend = list(orientation = \"h\", x = 0.25, y = -0.02)) |&gt;\n  partial_bundle() # reduce html file size"
  },
  {
    "objectID": "countries.html#table-of-response-numbers-by-continent",
    "href": "countries.html#table-of-response-numbers-by-continent",
    "title": "Survey response numbers",
    "section": "Table of response numbers by continent",
    "text": "Table of response numbers by continent\n\n\nShow code\nd_clean |&gt; \n  count(continent, sort = TRUE) |&gt;\n  reactable(\n    striped = TRUE,\n    columns = list(\n      continent = colDef(minWidth = 400),\n      n = colDef(minWidth = 50)\n      ),\n    fullWidth = FALSE\n    )"
  },
  {
    "objectID": "countries.html#table-of-response-numbers-by-country",
    "href": "countries.html#table-of-response-numbers-by-country",
    "title": "Survey response numbers",
    "section": "Table of response numbers by country",
    "text": "Table of response numbers by country\n\n\nShow code\ncountry_counts |&gt;\n  reactable(defaultSorted = \"n\", \n            defaultSortOrder = \"desc\", \n            searchable = TRUE, \n            striped = TRUE, \n            defaultPageSize = 300, \n            columns = list(\n              continent = colDef(minWidth = 200),\n              country = colDef(minWidth = 200),\n              n = colDef(minWidth = 50)\n              ), \n            fullWidth = FALSE)"
  }
]